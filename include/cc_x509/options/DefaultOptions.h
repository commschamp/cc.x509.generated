// Generated by commsdsl2comms v6.0.0

/// @file
/// @brief Contains definition of protocol default options.

#pragma once

#include "comms/options.h"

namespace cc_x509
{

namespace options
{

/// @brief Empty class to serve as the base for options.
struct EmptyOptions {};

/// @brief Default (empty) options of the protocol.
template <typename TBase = EmptyOptions>
struct DefaultOptionsT : public TBase
{
    struct cc_x509
    {
        /// @brief Extra options for fields.
        struct field
        {
            struct AlgorithmIdentifierMembers
            {
                struct ValueMembers
                {
                    /// @brief Extra options for @ref
                    ///     cc_x509::field::AlgorithmIdentifierMembers::ValueMembers::Parameters
                    ///     field.
                    using Parameters = comms::option::EmptyOption;
                }; // struct ValueMembers
            }; // struct AlgorithmIdentifierMembers

            struct AttributeTypeAndValueMembers
            {
                struct ValueMembers
                {
                    /// @brief Extra options for @ref
                    ///     cc_x509::field::AttributeTypeAndValueMembers::ValueMembers::Value
                    ///     field.
                    using Value = comms::option::EmptyOption;
                }; // struct ValueMembers
            }; // struct AttributeTypeAndValueMembers

            struct RDNSequenceMembers
            {
                /// @brief Extra options for @ref
                ///     cc_x509::field::RDNSequenceMembers::Value
                ///     field.
                using Value = comms::option::EmptyOption;
            }; // struct RDNSequenceMembers

            struct RelativeDistinguishedNameMembers
            {
                /// @brief Extra options for @ref
                ///     cc_x509::field::RelativeDistinguishedNameMembers::Value
                ///     field.
                using Value = comms::option::EmptyOption;
            }; // struct RelativeDistinguishedNameMembers

            struct TBSCertificateMembers
            {
                struct ValueMembers
                {
                    struct IssuerUniqueIDMembers
                    {
                        struct ActIssuerUniqueIDMembers
                        {
                            /// @brief Extra options for @ref
                            ///     cc_x509::field::TBSCertificateMembers::ValueMembers::IssuerUniqueIDMembers::ActIssuerUniqueIDMembers::Value
                            ///     field.
                            using Value = comms::option::EmptyOption;
                        }; // struct ActIssuerUniqueIDMembers
                    }; // struct IssuerUniqueIDMembers

                    struct SubjectUniqueIDMembers
                    {
                        struct ActSubjectUniqueIDMembers
                        {
                            /// @brief Extra options for @ref
                            ///     cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectUniqueIDMembers::ActSubjectUniqueIDMembers::Value
                            ///     field.
                            using Value = comms::option::EmptyOption;
                        }; // struct ActSubjectUniqueIDMembers
                    }; // struct SubjectUniqueIDMembers

                    struct ExtensionsMembers
                    {
                        struct ActExtensionsMembers
                        {
                            struct ValueMembers
                            {
                                /// @brief Extra options for @ref
                                ///     cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::ValueMembers::Value
                                ///     field.
                                using Value = comms::option::EmptyOption;
                            }; // struct ValueMembers
                        }; // struct ActExtensionsMembers
                    }; // struct ExtensionsMembers
                }; // struct ValueMembers
            }; // struct TBSCertificateMembers
        }; // struct field

        /// @brief Extra options for frames.
        struct frame
        {
            /// @brief Extra options for layers of
            ///     @ref cc_x509::frame::Frame frame.
            struct FrameLayers
            {
                /// @brief Extra options for @ref
                ///     cc_x509::frame::FrameLayers::Data layer.
                using Data = comms::option::EmptyOption;

                /// @brief Extra options for @ref
                ///     cc_x509::frame::FrameLayers::Id layer.
                using Id = comms::option::EmptyOption;
            }; // struct FrameLayers
        }; // struct frame

        /// @brief Extra options for namespace.
        struct asn1
        {
            /// @brief Extra options for namespace.
            struct der
            {
                /// @brief Extra options for fields.
                struct field
                {
                    struct GeneralizedTimeMembers
                    {
                        /// @brief Extra options for @ref
                        ///     cc_x509::asn1::der::field::GeneralizedTimeMembers::Value
                        ///     field.
                        using Value = comms::option::EmptyOption;
                    }; // struct GeneralizedTimeMembers

                    struct OctetStringMembers
                    {
                        /// @brief Extra options for @ref
                        ///     cc_x509::asn1::der::field::OctetStringMembers::Value
                        ///     field.
                        using Value = comms::option::EmptyOption;
                    }; // struct OctetStringMembers

                    struct RawBitStringMembers
                    {
                        /// @brief Extra options for @ref
                        ///     cc_x509::asn1::der::field::RawBitStringMembers::Value
                        ///     field.
                        using Value = comms::option::EmptyOption;
                    }; // struct RawBitStringMembers

                    struct RawIntegerMembers
                    {
                        /// @brief Extra options for @ref
                        ///     cc_x509::asn1::der::field::RawIntegerMembers::Value
                        ///     field.
                        using Value = comms::option::EmptyOption;
                    }; // struct RawIntegerMembers

                    struct UtcTimeMembers
                    {
                        /// @brief Extra options for @ref
                        ///     cc_x509::asn1::der::field::UtcTimeMembers::Value
                        ///     field.
                        using Value = comms::option::EmptyOption;
                    }; // struct UtcTimeMembers
                }; // struct field
            }; // struct der

            /// @brief Extra options for fields.
            struct field
            {
                /// @brief Extra options for @ref
                ///     cc_x509::asn1::field::ObjectIdentifierVal
                ///     field.
                using ObjectIdentifierVal = comms::option::EmptyOption;
            }; // struct field
        }; // struct asn1
    }; // struct cc_x509
};

/// @brief Default (empty) options of the protocol.
using DefaultOptions = DefaultOptionsT<>;

} // namespace options

} // namespace cc_x509
