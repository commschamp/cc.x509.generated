// Generated by commsdsl2comms v7.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_x509::field::Name field.

#pragma once

#include <type_traits>
#include <utility>
#include "cc_x509/field/RDNSequenceCommon.h"

namespace cc_x509
{

namespace field
{

/// @brief Scope for all the common definitions of the member fields of
///     @ref cc_x509::field::Name field.
struct NameMembersCommon
{
    /// @brief Common definitions of the member fields of
    ///     @ref cc_x509::field::NameMembers::RdnSequence field.
    using RdnSequenceMembersCommon = cc_x509::field::RDNSequenceMembersCommon;

    /// @brief Common types and functions for
    ///     @ref cc_x509::field::NameMembers::RdnSequence field.
    struct RdnSequenceCommon : public cc_x509::field::RDNSequenceCommon
    {
        /// @brief Name of the @ref cc_x509::field::NameMembers::RdnSequence field.
        static const char* name()
        {
            return "rdnSequence";
        }
    };
};

/// @brief Common types and functions for
///     @ref cc_x509::field::Name field.
struct NameCommon
{
    /// @brief Single member name info entry
    using MemberNameInfo = const char*;

    /// @brief Type returned from @ref memberNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using MemberNamesMapInfo = std::pair<const MemberNameInfo*, std::size_t>;

    /// @brief Name of the @ref cc_x509::field::Name field.
    static const char* name()
    {
        return "Name";
    }

    /// @brief Retrieve name of the member
    static const char* memberName(std::size_t idx)
    {
        auto namesMapInfo = memberNamesMap();
        if (namesMapInfo.second <= idx) {
            return nullptr;
        }

        return namesMapInfo.first[idx];
    }

    /// @brief Retrieve map of members names
    static MemberNamesMapInfo memberNamesMap()
    {
        static const MemberNameInfo Map[] = {
            NameMembersCommon::RdnSequenceCommon::name()
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

        return std::make_pair(&Map[0], MapSize);
    }
};

} // namespace field

} // namespace cc_x509
