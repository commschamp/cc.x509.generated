// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains definition of <b>"TBSCertificate"</b> field.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_x509/asn1/der/field/Length.h"
#include "cc_x509/asn1/der/field/RawInteger.h"
#include "cc_x509/field/AlgorithmIdentifier.h"
#include "cc_x509/field/Extension.h"
#include "cc_x509/field/FieldBase.h"
#include "cc_x509/field/Name.h"
#include "cc_x509/field/SubjectPublicKeyInfo.h"
#include "cc_x509/field/TBSCertificateCommon.h"
#include "cc_x509/field/Validity.h"
#include "cc_x509/field/Version.h"
#include "cc_x509/options/DefaultOptions.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/field/Optional.h"
#include "comms/options.h"

namespace cc_x509
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref TBSCertificate field.
/// @tparam TOpt Protocol options.
template <typename TOpt = cc_x509::options::DefaultOptions>
struct TBSCertificateMembers
{
    /// @brief Definition of <b>"Tag"</b> field.
    class Tag : public
        comms::field::IntValue<
            cc_x509::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::HasName,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::FixedValue,
            comms::option::def::DefaultNumValue<48>,
            comms::option::def::ValidNumValue<48>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_x509::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::FixedValue,
                comms::option::def::DefaultNumValue<48>,
                comms::option::def::ValidNumValue<48>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_x509::field::TBSCertificateMembersCommon::TagCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_x509::field::TBSCertificateMembersCommon::TagCommon::name();
        }
    };

    /// @brief Definition of <b>"Length"</b> field.
    using Length =
        cc_x509::asn1::der::field::Length<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Scope for all the member fields of
    ///     @ref Value field.
    struct ValueMembers
    {
        /// @brief Definition of <b>"version"</b> field.
        class Version : public
            cc_x509::field::Version<
                TOpt,
                comms::option::def::HasName
            >
        {
            using Base =
                cc_x509::field::Version<
                    TOpt,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::VersionCommon::name();
            }
        };

        /// @brief Definition of <b>"serialNumber"</b> field.
        class SerialNumber : public
            cc_x509::asn1::der::field::RawInteger<
                TOpt,
                comms::option::def::HasName
            >
        {
            using Base =
                cc_x509::asn1::der::field::RawInteger<
                    TOpt,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SerialNumberCommon::name();
            }
        };

        /// @brief Definition of <b>"signature"</b> field.
        class Signature : public
            cc_x509::field::AlgorithmIdentifier<
                TOpt,
                comms::option::def::HasName
            >
        {
            using Base =
                cc_x509::field::AlgorithmIdentifier<
                    TOpt,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SignatureCommon::name();
            }
        };

        /// @brief Definition of <b>"issuer"</b> field.
        class Issuer : public
            cc_x509::field::Name<
                TOpt,
                comms::option::def::HasName
            >
        {
            using Base =
                cc_x509::field::Name<
                    TOpt,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::IssuerCommon::name();
            }
        };

        /// @brief Definition of <b>"validity"</b> field.
        class Validity : public
            cc_x509::field::Validity<
                TOpt,
                comms::option::def::HasName
            >
        {
            using Base =
                cc_x509::field::Validity<
                    TOpt,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ValidityCommon::name();
            }
        };

        /// @brief Definition of <b>"subject"</b> field.
        class Subject : public
            cc_x509::field::Name<
                TOpt,
                comms::option::def::HasName
            >
        {
            using Base =
                cc_x509::field::Name<
                    TOpt,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectCommon::name();
            }
        };

        /// @brief Definition of <b>"subjectPublicKeyInfo"</b> field.
        class SubjectPublicKeyInfo : public
            cc_x509::field::SubjectPublicKeyInfo<
                TOpt,
                comms::option::def::HasName
            >
        {
            using Base =
                cc_x509::field::SubjectPublicKeyInfo<
                    TOpt,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectPublicKeyInfoCommon::name();
            }
        };

        /// @brief Scope for all the member fields of
        ///     @ref IssuerUniqueID field.
        struct IssuerUniqueIDMembers
        {
            /// @brief Scope for all the member fields of
            ///     @ref ActIssuerUniqueID field.
            struct ActIssuerUniqueIDMembers
            {
                /// @brief Definition of <b>"Tag"</b> field.
                class Tag : public
                    comms::field::IntValue<
                        cc_x509::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<129>,
                        comms::option::def::ValidNumValue<129>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_x509::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<129>,
                            comms::option::def::ValidNumValue<129>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::IssuerUniqueIDMembersCommon::ActIssuerUniqueIDMembersCommon::TagCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::IssuerUniqueIDMembersCommon::ActIssuerUniqueIDMembersCommon::TagCommon::name();
                    }
                };

                /// @brief Definition of <b>"Length"</b> field.
                using Length =
                    cc_x509::asn1::der::field::Length<
                        TOpt,
                        comms::option::def::HasName
                    >;

                /// @brief Definition of <b>"Shift"</b> field.
                class Shift : public
                    comms::field::IntValue<
                        cc_x509::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::ValidNumValueRange<0, 7>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_x509::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::ValidNumValueRange<0, 7>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::IssuerUniqueIDMembersCommon::ActIssuerUniqueIDMembersCommon::ShiftCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::IssuerUniqueIDMembersCommon::ActIssuerUniqueIDMembersCommon::ShiftCommon::name();
                    }
                };

                /// @brief Definition of <b>"Value"</b> field.
                class Value : public
                    comms::field::ArrayList<
                        cc_x509::field::FieldBase<>,
                        std::uint8_t,
                        typename TOpt::cc_x509::field::TBSCertificateMembers::ValueMembers::IssuerUniqueIDMembers::ActIssuerUniqueIDMembers::Value,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::ArrayList<
                            cc_x509::field::FieldBase<>,
                            std::uint8_t,
                            typename TOpt::cc_x509::field::TBSCertificateMembers::ValueMembers::IssuerUniqueIDMembers::ActIssuerUniqueIDMembers::Value,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::IssuerUniqueIDMembersCommon::ActIssuerUniqueIDMembersCommon::ValueCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Tag,
                       Length,
                       Shift,
                       Value
                    >;
            };

            /// @brief Definition of <b>"actIssuerUniqueID"</b> field.
            class ActIssuerUniqueID : public
                comms::field::Bundle<
                    cc_x509::field::FieldBase<>,
                    typename ActIssuerUniqueIDMembers::All,
                    comms::option::def::HasName,
                    comms::option::def::RemLengthMemberField<1U>,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_x509::field::FieldBase<>,
                        typename ActIssuerUniqueIDMembers::All,
                        comms::option::def::HasName,
                        comms::option::def::RemLengthMemberField<1U>,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_tag index, @b Field_tag type and @b field_tag() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::IssuerUniqueIDMembers::ActIssuerUniqueIDMembers::Tag member field.
                ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::IssuerUniqueIDMembers::ActIssuerUniqueIDMembers::Length member field.
                ///     @li @b FieldIdx_shift index, @b Field_shift type and @b field_shift() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::IssuerUniqueIDMembers::ActIssuerUniqueIDMembers::Shift member field.
                ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::IssuerUniqueIDMembers::ActIssuerUniqueIDMembers::Value member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    tag,
                    length,
                    shift,
                    value
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::IssuerUniqueIDMembersCommon::ActIssuerUniqueIDCommon::name();
                }
            };
        };

        /// @brief Definition of <b>"issuerUniqueID"</b> field.
        class IssuerUniqueID : public
            comms::field::Optional<
                typename IssuerUniqueIDMembers::ActIssuerUniqueID,
                comms::option::def::HasName,
                comms::option::def::MissingOnReadFail
            >
        {
            using Base =
                comms::field::Optional<
                    typename IssuerUniqueIDMembers::ActIssuerUniqueID,
                    comms::option::def::HasName,
                    comms::option::def::MissingOnReadFail
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::IssuerUniqueIDCommon::name();
            }
        };

        /// @brief Scope for all the member fields of
        ///     @ref SubjectUniqueID field.
        struct SubjectUniqueIDMembers
        {
            /// @brief Scope for all the member fields of
            ///     @ref ActSubjectUniqueID field.
            struct ActSubjectUniqueIDMembers
            {
                /// @brief Definition of <b>"Tag"</b> field.
                class Tag : public
                    comms::field::IntValue<
                        cc_x509::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<130>,
                        comms::option::def::ValidNumValue<130>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_x509::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<130>,
                            comms::option::def::ValidNumValue<130>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectUniqueIDMembersCommon::ActSubjectUniqueIDMembersCommon::TagCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectUniqueIDMembersCommon::ActSubjectUniqueIDMembersCommon::TagCommon::name();
                    }
                };

                /// @brief Definition of <b>"Length"</b> field.
                using Length =
                    cc_x509::asn1::der::field::Length<
                        TOpt,
                        comms::option::def::HasName
                    >;

                /// @brief Definition of <b>"Shift"</b> field.
                class Shift : public
                    comms::field::IntValue<
                        cc_x509::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::ValidNumValueRange<0, 7>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_x509::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::ValidNumValueRange<0, 7>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectUniqueIDMembersCommon::ActSubjectUniqueIDMembersCommon::ShiftCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectUniqueIDMembersCommon::ActSubjectUniqueIDMembersCommon::ShiftCommon::name();
                    }
                };

                /// @brief Definition of <b>"Value"</b> field.
                class Value : public
                    comms::field::ArrayList<
                        cc_x509::field::FieldBase<>,
                        std::uint8_t,
                        typename TOpt::cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectUniqueIDMembers::ActSubjectUniqueIDMembers::Value,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::ArrayList<
                            cc_x509::field::FieldBase<>,
                            std::uint8_t,
                            typename TOpt::cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectUniqueIDMembers::ActSubjectUniqueIDMembers::Value,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectUniqueIDMembersCommon::ActSubjectUniqueIDMembersCommon::ValueCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Tag,
                       Length,
                       Shift,
                       Value
                    >;
            };

            /// @brief Definition of <b>"actSubjectUniqueID"</b> field.
            class ActSubjectUniqueID : public
                comms::field::Bundle<
                    cc_x509::field::FieldBase<>,
                    typename ActSubjectUniqueIDMembers::All,
                    comms::option::def::HasName,
                    comms::option::def::RemLengthMemberField<1U>,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_x509::field::FieldBase<>,
                        typename ActSubjectUniqueIDMembers::All,
                        comms::option::def::HasName,
                        comms::option::def::RemLengthMemberField<1U>,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_tag index, @b Field_tag type and @b field_tag() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectUniqueIDMembers::ActSubjectUniqueIDMembers::Tag member field.
                ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectUniqueIDMembers::ActSubjectUniqueIDMembers::Length member field.
                ///     @li @b FieldIdx_shift index, @b Field_shift type and @b field_shift() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectUniqueIDMembers::ActSubjectUniqueIDMembers::Shift member field.
                ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectUniqueIDMembers::ActSubjectUniqueIDMembers::Value member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    tag,
                    length,
                    shift,
                    value
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectUniqueIDMembersCommon::ActSubjectUniqueIDCommon::name();
                }
            };
        };

        /// @brief Definition of <b>"subjectUniqueID"</b> field.
        class SubjectUniqueID : public
            comms::field::Optional<
                typename SubjectUniqueIDMembers::ActSubjectUniqueID,
                comms::option::def::HasName,
                comms::option::def::MissingOnReadFail
            >
        {
            using Base =
                comms::field::Optional<
                    typename SubjectUniqueIDMembers::ActSubjectUniqueID,
                    comms::option::def::HasName,
                    comms::option::def::MissingOnReadFail
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::SubjectUniqueIDCommon::name();
            }
        };

        /// @brief Scope for all the member fields of
        ///     @ref Extensions field.
        struct ExtensionsMembers
        {
            /// @brief Scope for all the member fields of
            ///     @ref ActExtensions field.
            struct ActExtensionsMembers
            {
                /// @brief Definition of <b>"Tag"</b> field.
                class Tag : public
                    comms::field::IntValue<
                        cc_x509::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<163>,
                        comms::option::def::ValidNumValue<163>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_x509::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<163>,
                            comms::option::def::ValidNumValue<163>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ExtensionsMembersCommon::ActExtensionsMembersCommon::TagCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ExtensionsMembersCommon::ActExtensionsMembersCommon::TagCommon::name();
                    }
                };

                /// @brief Definition of <b>"Length"</b> field.
                using Length =
                    cc_x509::asn1::der::field::Length<
                        TOpt,
                        comms::option::def::HasName
                    >;

                /// @brief Scope for all the member fields of
                ///     @ref Value field.
                struct ValueMembers
                {
                    /// @brief Definition of <b>"Tag"</b> field.
                    class Tag : public
                        comms::field::IntValue<
                            cc_x509::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<48>,
                            comms::option::def::ValidNumValue<48>
                        >
                    {
                        using Base =
                            comms::field::IntValue<
                                cc_x509::field::FieldBase<>,
                                std::uint8_t,
                                comms::option::def::HasName,
                                comms::option::def::FailOnInvalid<>,
                                comms::option::def::FixedValue,
                                comms::option::def::DefaultNumValue<48>,
                                comms::option::def::ValidNumValue<48>
                            >;
                    public:
                        /// @brief Re-definition of the value type.
                        using ValueType = typename Base::ValueType;

                        /// @brief Compile time detection of special values presence.
                        static constexpr bool hasSpecials()
                        {
                            return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ExtensionsMembersCommon::ActExtensionsMembersCommon::ValueMembersCommon::TagCommon::hasSpecials();
                        }

                        /// @brief Name of the field.
                        static const char* name()
                        {
                            return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ExtensionsMembersCommon::ActExtensionsMembersCommon::ValueMembersCommon::TagCommon::name();
                        }
                    };

                    /// @brief Definition of <b>"Length"</b> field.
                    using Length =
                        cc_x509::asn1::der::field::Length<
                            TOpt,
                            comms::option::def::HasName
                        >;

                    /// @brief Definition of <b>"Value"</b> field.
                    class Value : public
                        comms::field::ArrayList<
                            cc_x509::field::FieldBase<>,
                            cc_x509::field::Extension<TOpt>,
                            typename TOpt::cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::ValueMembers::Value,
                            comms::option::def::HasName
                        >
                    {
                        using Base =
                            comms::field::ArrayList<
                                cc_x509::field::FieldBase<>,
                                cc_x509::field::Extension<TOpt>,
                                typename TOpt::cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::ValueMembers::Value,
                                comms::option::def::HasName
                            >;
                    public:
                        /// @brief Name of the field.
                        static const char* name()
                        {
                            return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ExtensionsMembersCommon::ActExtensionsMembersCommon::ValueMembersCommon::ValueCommon::name();
                        }
                    };

                    /// @brief All members bundled in @b std::tuple.
                    using All =
                        std::tuple<
                           Tag,
                           Length,
                           Value
                        >;
                };

                /// @brief Definition of <b>"Value"</b> field.
                class Value : public
                    comms::field::Bundle<
                        cc_x509::field::FieldBase<>,
                        typename ValueMembers::All,
                        comms::option::def::HasName,
                        comms::option::def::RemLengthMemberField<1U>,
                        comms::option::def::HasVersionDependentMembers<false>
                    >
                {
                    using Base =
                        comms::field::Bundle<
                            cc_x509::field::FieldBase<>,
                            typename ValueMembers::All,
                            comms::option::def::HasName,
                            comms::option::def::RemLengthMemberField<1U>,
                            comms::option::def::HasVersionDependentMembers<false>
                        >;
                public:
                    /// @brief Allow access to internal fields.
                    /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                    ///     related to @b comms::field::Bundle class from COMMS library
                    ///     for details.
                    ///
                    ///     The generated values, types and access functions are:
                    ///     @li @b FieldIdx_tag index, @b Field_tag type and @b field_tag() access function -
                    ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::ValueMembers::Tag member field.
                    ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
                    ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::ValueMembers::Length member field.
                    ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
                    ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::ValueMembers::Value member field.
                    COMMS_FIELD_MEMBERS_NAMES(
                        tag,
                        length,
                        value
                    );

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ExtensionsMembersCommon::ActExtensionsMembersCommon::ValueCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Tag,
                       Length,
                       Value
                    >;
            };

            /// @brief Definition of <b>"actExtensions"</b> field.
            class ActExtensions : public
                comms::field::Bundle<
                    cc_x509::field::FieldBase<>,
                    typename ActExtensionsMembers::All,
                    comms::option::def::HasName,
                    comms::option::def::RemLengthMemberField<1U>,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_x509::field::FieldBase<>,
                        typename ActExtensionsMembers::All,
                        comms::option::def::HasName,
                        comms::option::def::RemLengthMemberField<1U>,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_tag index, @b Field_tag type and @b field_tag() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::Tag member field.
                ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::Length member field.
                ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
                ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::ExtensionsMembers::ActExtensionsMembers::Value member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    tag,
                    length,
                    value
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ExtensionsMembersCommon::ActExtensionsCommon::name();
                }
            };
        };

        /// @brief Definition of <b>"extensions"</b> field.
        class Extensions : public
            comms::field::Optional<
                typename ExtensionsMembers::ActExtensions,
                comms::option::def::HasName,
                comms::option::def::MissingOnReadFail
            >
        {
            using Base =
                comms::field::Optional<
                    typename ExtensionsMembers::ActExtensions,
                    comms::option::def::HasName,
                    comms::option::def::MissingOnReadFail
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_x509::field::TBSCertificateMembersCommon::ValueMembersCommon::ExtensionsCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Version,
               SerialNumber,
               Signature,
               Issuer,
               Validity,
               Subject,
               SubjectPublicKeyInfo,
               IssuerUniqueID,
               SubjectUniqueID,
               Extensions
            >;
    };

    /// @brief Definition of <b>"Value"</b> field.
    class Value : public
        comms::field::Bundle<
            cc_x509::field::FieldBase<>,
            typename ValueMembers::All,
            comms::option::def::HasName,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_x509::field::FieldBase<>,
                typename ValueMembers::All,
                comms::option::def::HasName,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::Version member field.
        ///     @li @b FieldIdx_serialNumber index, @b Field_serialNumber type and @b field_serialNumber() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::SerialNumber member field.
        ///     @li @b FieldIdx_signature index, @b Field_signature type and @b field_signature() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::Signature member field.
        ///     @li @b FieldIdx_issuer index, @b Field_issuer type and @b field_issuer() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::Issuer member field.
        ///     @li @b FieldIdx_validity index, @b Field_validity type and @b field_validity() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::Validity member field.
        ///     @li @b FieldIdx_subject index, @b Field_subject type and @b field_subject() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::Subject member field.
        ///     @li @b FieldIdx_subjectPublicKeyInfo index, @b Field_subjectPublicKeyInfo type and @b field_subjectPublicKeyInfo() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectPublicKeyInfo member field.
        ///     @li @b FieldIdx_issuerUniqueID index, @b Field_issuerUniqueID type and @b field_issuerUniqueID() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::IssuerUniqueID member field.
        ///     @li @b FieldIdx_subjectUniqueID index, @b Field_subjectUniqueID type and @b field_subjectUniqueID() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::SubjectUniqueID member field.
        ///     @li @b FieldIdx_extensions index, @b Field_extensions type and @b field_extensions() access function -
        ///         for cc_x509::field::TBSCertificateMembers::ValueMembers::Extensions member field.
        COMMS_FIELD_MEMBERS_NAMES(
            version,
            serialNumber,
            signature,
            issuer,
            validity,
            subject,
            subjectPublicKeyInfo,
            issuerUniqueID,
            subjectUniqueID,
            extensions
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_x509::field::TBSCertificateMembersCommon::ValueCommon::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           Tag,
           Length,
           Value
        >;
};

/// @brief Definition of <b>"TBSCertificate"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_x509::options::DefaultOptions, typename... TExtraOpts>
class TBSCertificate : public
    comms::field::Bundle<
        cc_x509::field::FieldBase<>,
        typename TBSCertificateMembers<TOpt>::All,
        TExtraOpts...,
        comms::option::def::HasName,
        comms::option::def::RemLengthMemberField<1U>,
        comms::option::def::HasVersionDependentMembers<false>
    >
{
    using Base =
        comms::field::Bundle<
            cc_x509::field::FieldBase<>,
            typename TBSCertificateMembers<TOpt>::All,
            TExtraOpts...,
            comms::option::def::HasName,
            comms::option::def::RemLengthMemberField<1U>,
            comms::option::def::HasVersionDependentMembers<false>
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
    ///     related to @b comms::field::Bundle class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_tag index, @b Field_tag type and @b field_tag() access function -
    ///         for cc_x509::field::TBSCertificateMembers::Tag member field.
    ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
    ///         for cc_x509::field::TBSCertificateMembers::Length member field.
    ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
    ///         for cc_x509::field::TBSCertificateMembers::Value member field.
    COMMS_FIELD_MEMBERS_NAMES(
        tag,
        length,
        value
    );

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_x509::field::TBSCertificateCommon::name();
    }
};

} // namespace field

} // namespace cc_x509
