// Generated by commsdsl2comms v7.1.0

/// @file
/// @brief Contains definition of <b>"Name"</b> field.

#pragma once

#include <tuple>
#include "cc_x509/field/FieldBase.h"
#include "cc_x509/field/NameCommon.h"
#include "cc_x509/field/RDNSequence.h"
#include "cc_x509/options/DefaultOptions.h"
#include "comms/Assert.h"
#include "comms/CompileControl.h"
#include "comms/field/Variant.h"
#include "comms/options.h"

namespace cc_x509
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref Name field.
/// @tparam TOpt Protocol options.
template <typename TOpt = cc_x509::options::DefaultOptions>
struct NameMembers
{
    /// @brief Definition of <b>"rdnSequence"</b> field.
    class RdnSequence : public
        cc_x509::field::RDNSequence<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_x509::field::RDNSequence<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_x509::field::NameMembersCommon::RdnSequenceCommon::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           RdnSequence
        >;
};

/// @brief Definition of <b>"Name"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_x509::options::DefaultOptions, typename... TExtraOpts>
class Name : public
    comms::field::Variant<
        cc_x509::field::FieldBase<>,
        typename NameMembers<TOpt>::All,
        TExtraOpts...,
        comms::option::def::HasName,
        comms::option::def::HasCustomWrite,
        comms::option::def::HasCustomRefresh,
        comms::option::def::VariantHasCustomResetOnDestruct,
        comms::option::def::HasVersionDependentMembers<false>
    >
{
    using Base =
        comms::field::Variant<
            cc_x509::field::FieldBase<>,
            typename NameMembers<TOpt>::All,
            TExtraOpts...,
            comms::option::def::HasName,
            comms::option::def::HasCustomWrite,
            comms::option::def::HasCustomRefresh,
            comms::option::def::VariantHasCustomResetOnDestruct,
            comms::option::def::HasVersionDependentMembers<false>
        >;
public:
    /// @brief Default constructor.
    Name() = default;

    /// @brief Destructor
    ~Name()
    {
        reset();
    }

    /// @brief Single member name info entry
    using MemberNameInfo = cc_x509::field::NameCommon::MemberNameInfo;

    /// @brief Type returned from @ref memberNamesMap() member function.
    /// @see @ref cc_x509::field::NameCommon::MemberNamesMapInfo.
    using MemberNamesMapInfo = cc_x509::field::NameCommon::MemberNamesMapInfo;

    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_VARIANT_MEMBERS_NAMES macro
    ///     related to @b comms::field::Variant class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_rdnSequence index, @b Field_rdnSequence type,
    ///         @b initField_rdnSequence(), @b deinitField_rdnSequence() and @b accessField_rdnSequence() access functions -
    ///         for cc_x509::field::NameMembers::RdnSequence member field.
    COMMS_VARIANT_MEMBERS_NAMES(
        rdnSequence
    );

    /// @brief Copy constructor.
    Name(const Name& other) :
        Base()
    {
        *this = other;
    }

    /// @brief Move constructor.
    Name(Name&& other) : 
        Base()
    {
        *this = std::move(other);
    }

    /// @brief Copy assignment operator.
    Name& operator=(const Name& other)
    {
        if (this == &other) {
            return *this;
        }

        reset();

        if (!other.currentFieldValid()) {
            return *this;
        }

        switch (other.currentField()) {
            case FieldIdx_rdnSequence: initField_rdnSequence() = other.accessField_rdnSequence(); return *this;
            default: break;
        }

        COMMS_ASSERT(false); // Should not be reached
        return *this;
    }

    /// @brief Move assignement operator.
    Name& operator=(Name&& other)
    {    if (this == &other) {
            return *this;
        }

        reset();

        if (!other.currentFieldValid()) {
            return *this;
        }

        switch (other.currentField()) {
            case FieldIdx_rdnSequence: initField_rdnSequence() = std::move(other.accessField_rdnSequence()); return *this;
            default: break;
        }

        COMMS_ASSERT(false); // Should not be reached
        return *this;
    }

    /// @brief Equality comparison operator.
    bool operator==(const Name& other) const
    {
        if (this == &other) {
            return true;
        }

        if (Base::currentFieldValid() != other.currentFieldValid()) {
            return false;
        }

        if (!Base::currentFieldValid()) {

            return true;
        }

        if (Base::currentField() != other.currentField()) {
            return false;
        }

        switch(Base::currentField()) {
            case FieldIdx_rdnSequence: return accessField_rdnSequence() == other.accessField_rdnSequence();
            default: break;
        }

        COMMS_ASSERT(false); // Should not be reached
        return false;
    }

    /// @brief Inequality comparison operator.
    bool operator!=(const Name& other) const
    {
        return !(*this == other);
    }

    /// @brief Order comparison operator.
    bool operator<(const Name& other) const
    {
        if (!Base::currentFieldValid()) {
            return (!other.currentFieldValid());
        }

        if (!other.currentFieldValid()) {
            return false;
        }

        if (Base::currentField() < other.currentField()) {
            return true;
        }

        if (Base::currentField() != other.currentField()) {
            return false;
        }

        if (this == &other) {
            return false;
        }
        switch(Base::currentField()) {
            case FieldIdx_rdnSequence: return accessField_rdnSequence() < other.accessField_rdnSequence();
            default: break;
        }

        COMMS_ASSERT(false); // Should not be reached
        return false;
    }

    /// @brief Optimized currentFieldExec functionality.
    /// @details Replaces the currentFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currentFieldExec(TFunc&& func) 
    {
        switch (Base::currentField()) {
            case FieldIdx_rdnSequence:
                memFieldDispatch<FieldIdx_rdnSequence>(accessField_rdnSequence(), std::forward<TFunc>(func));
                break;
            default:
                static constexpr bool Invalid_field_execution = false;
                static_cast<void>(Invalid_field_execution);
                COMMS_ASSERT(Invalid_field_execution);
                break;
        }
    }

    /// @brief The same as currentFieldExec() 
    /// @details Generated for backward comatibility, can be removed in the future.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) 
    {
        currentFieldExec(std::forward<TFunc>(func));
    }

    /// @brief Optimized currentFieldExec functionality (const variant).
    /// @details Replaces the currentFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currentFieldExec(TFunc&& func) const
    {
        switch (Base::currentField()) {
            case FieldIdx_rdnSequence:
                memFieldDispatch<FieldIdx_rdnSequence>(accessField_rdnSequence(), std::forward<TFunc>(func));
                break;
            default:
                static constexpr bool Invalid_field_execution = false;
                static_cast<void>(Invalid_field_execution);
                COMMS_ASSERT(Invalid_field_execution);
                break;
        }
    }

    /// @brief The same as currentFieldExec()  (const variant)
    /// @details Generated for backward comatibility, can be removed in the future.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) const
    {
        currentFieldExec(std::forward<TFunc>(func));
    }

    /// @brief Optimized runtime selection field functionality.
    /// @details Replaces the selectField() member function defined
    ///    by @b comms::field::Variant.
    void selectField(std::size_t idx)
    {
        if (Base::currentField() == idx) {
            return;
        }

        reset();
        switch (idx) {
            case FieldIdx_rdnSequence: initField_rdnSequence(); return;
            default: break;
        }
        COMMS_ASSERT(false); // Should not be reached
    }

    /// @brief Optimized reset functionality.
    /// @details Replaces the reset() member function defined
    ///    by @b comms::field::Variant.
    void reset()
    {
        if (!Base::currentFieldValid()) {
            return;
        }

        switch (Base::currentField()) {
            case FieldIdx_rdnSequence: deinitField_rdnSequence(); return;
            default: break;
        }
        COMMS_ASSERT(false); // Should not be reached
    }

    /// @brief Optimized check ability to write.
    /// @details Replaces the canWrite() member function defined
    ///    by @b comms::field::Variant.
    bool canWrite() const
    {
        if (!Base::currentFieldValid()) {
            return true;
        }

        switch (Base::currentField()) {
            case FieldIdx_rdnSequence: return accessField_rdnSequence().canWrite();
            default: break;
        }
        COMMS_ASSERT(false); // Should not be reached
        return false;
    }

    /// @brief Retrieve name of the member
    /// @see @ref cc_x509::field::NameCommon::memberName().
    static const char* memberName(std::size_t idx)
    {
        return cc_x509::field::NameCommon::memberName(idx);
    }

    /// @brief Retrieve name of the member
    /// @see @ref cc_x509::field::NameCommon::memberName().
    static const char* memberName(FieldIdx idx)
    {
        return memberName(static_cast<std::size_t>(idx));
    }

    /// @brief Retrieve map of members names
    /// @see @ref cc_x509::field::NameCommon::memberNamesMap().
    static MemberNamesMapInfo memberNamesMap()
    {
        return cc_x509::field::NameCommon::memberNamesMap();
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_x509::field::NameCommon::name();
    }

    /// @brief Generated write functionality.
    template <typename TIter>
    comms::ErrorStatus write(TIter& iter, std::size_t len) const
    {
        switch (Base::currentField()) {
            case FieldIdx_rdnSequence: return accessField_rdnSequence().write(iter, len);
            default: break;
        }

        return comms::ErrorStatus::Success;
    }

    /// @brief Generated refresh functionality.
    bool refresh()
    {
        switch (Base::currentField()) {
            case FieldIdx_rdnSequence: return accessField_rdnSequence().refresh();
            default: break;
        }

        return false;
    }

    /// @brief Generated length functionality.
    std::size_t length() const
    {
        switch (Base::currentField()) {
            case FieldIdx_rdnSequence: return accessField_rdnSequence().length();
            default: break;
        }

        return 0U;
    }

    /// @brief Generated validity check functionality.
    bool valid() const
    {
        switch (Base::currentField()) {
            case FieldIdx_rdnSequence: return accessField_rdnSequence().valid();
            default: break;
        }

        return false;
    }

private:
    template <std::size_t TIdx, typename TField, typename TFunc>
    static void memFieldDispatch(TField&& f, TFunc&& func)
    {
        #ifdef _MSC_VER
            func.operator()<TIdx>(std::forward<TField>(f)); // VS compiler
        #else // #ifdef _MSC_VER
            func.template operator()<TIdx>(std::forward<TField>(f)); // All other compilers
        #endif // #ifdef _MSC_VER
    }
};

} // namespace field

} // namespace cc_x509
