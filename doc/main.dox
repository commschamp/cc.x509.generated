/// @mainpage "cc_x509" Binary Protocol Library
/// @tableofcontents
/// This generated code implements "cc_x509" binary protocol using various
/// classes from
/// <a href="https://github.com/commschamp/comms">COMMS Library</a>.@n
/// Below is a short summary of generated classes.
/// Please refer to <b>"How to Use Defined Custom Protocol"</b> page of its documentation
/// for detailed explanation on how to use them.
///
/// @b NOTE, that the generated protocol code is mostly declarative statements
/// of classes and types definitions. It is self explanatory and easy to read.
/// In many cases it is easier to read and understand the generated code, than the
/// doxygen generated documentation. Please spend some time on browsing around
/// and looking at the generated code in addition to reading this documentation.
///
/// @section main_messages Available Message Classes
/// The following namespaces contain all the classes describing available messages:
/// @li @ref cc_x509::message (defined in @b cc_x509/message  directory)
/// @li @ref cc_x509::asn1::der::message (defined in @b cc_x509/asn1/der/message  directory)
/// @li @ref cc_x509::asn1::message (defined in @b cc_x509/asn1/message  directory)
///
/// @section main_fields Available Common Fields
/// The following namespaces contain all definition of all the fields,
/// which can be references by multiple messages:
/// @li @ref cc_x509::field (defined in @b cc_x509/field  directory)
/// @li @ref cc_x509::asn1::der::field (defined in @b cc_x509/asn1/der/field  directory)
/// @li @ref cc_x509::asn1::field (defined in @b cc_x509/asn1/field  directory)
///
/// @section main_interfaces Common Interface Classes
/// The available common interface classes are:
/// @li @ref cc_x509::Message (defined in @b cc_x509/Message.h header file).
///
/// @section main_frames Frame Classes
/// The available frame classes are:
/// @li @ref cc_x509::frame::Frame (from @b cc_x509/frame/Frame.h header file).
///
/// Every frame class/type definition receives (as a template parameter) a list of
/// @b input message types it is expected to recognize. Default defintion
/// uses @b All messages bundle (for example @ref cc_x509::input::AllMessages defined in @b cc_x509/input/AllMessages.h).
/// @n If protocol defines any uni-directional message, then it is recommended to use
/// either @b Server messages bundle (for example @ref cc_x509::input::ServerInputMessages from @b cc_x509/input/ServerInputMessages.h)
/// or @b Client messages bundle (for example @ref cc_x509::input::ClientInputMessages from @b cc_x509/input/ClientInputMessages.h)
/// @b NOTE, that the frame definition does not exactly follow the recommended
/// instructions from <b>Protocol Stack Definition Tutorial</b> page of @b COMMS
/// library documentation. The extra customization (see @ref main_customization below)
/// is performed by passing options to the layers themselves.
///
/// The available bundles of input messages are:
/// @li @ref cc_x509::input::AllMessages (from @b cc_x509/input/AllMessages.h header file).
/// @li @ref cc_x509::input::ServerInputMessages (from @b cc_x509/input/ServerInputMessages.h header file).
/// @li @ref cc_x509::input::ClientInputMessages (from @b cc_x509/input/ClientInputMessages.h header file).
///
/// @section main_dispatch Dispatching Message Objects
/// While the @b COMMS library provides various built-in ways of 
/// dispatching message objects into their respective handlers
/// (see <b>Advanced Guide to Message Dispatching</b> page of the
/// @b COMMS library documentation), the generated code also provides
/// additional auxiliary dispatch functions which are @b switch statement
/// based.
///
/// The available functions are:
/// @li @ref cc_x509::dispatch::dispatchMessage()
/// (defined in @b cc_x509/dispatch/DispatchMessage.h header file).
/// @li @ref cc_x509::dispatch::dispatchMessageDefaultOptions()
/// (defined in @b cc_x509/dispatch/DispatchMessage.h header file).
/// @li @ref cc_x509::dispatch::dispatchServerInputMessage()
/// (defined in @b cc_x509/dispatch/DispatchServerInputMessage.h header file).
/// @li @ref cc_x509::dispatch::dispatchServerInputMessageDefaultOptions()
/// (defined in @b cc_x509/dispatch/DispatchServerInputMessage.h header file).
/// @li @ref cc_x509::dispatch::dispatchClientInputMessage()
/// (defined in @b cc_x509/dispatch/DispatchClientInputMessage.h header file).
/// @li @ref cc_x509::dispatch::dispatchClientInputMessageDefaultOptions()
/// (defined in @b cc_x509/dispatch/DispatchClientInputMessage.h header file).
///
/// There are also some dispatcher objects to be used with
/// @b comms::processAllWithDispatchViaDispatcher() function or similar.
/// @li @ref cc_x509::dispatch::MsgDispatcher
/// (defined in @b cc_x509/dispatch/DispatchMessage.h header file).
/// @li @ref cc_x509::dispatch::MsgDispatcherDefaultOptions
/// (defined in @b cc_x509/dispatch/DispatchMessage.h header file).
/// @li @ref cc_x509::dispatch::ServerInputMsgDispatcher
/// (defined in @b cc_x509/dispatch/DispatchServerInputMessage.h header file).
/// @li @ref cc_x509::dispatch::ServerInputMsgDispatcherDefaultOptions
/// (defined in @b cc_x509/dispatch/DispatchServerInputMessage.h header file).
/// @li @ref cc_x509::dispatch::ClientInputMsgDispatcher
/// (defined in @b cc_x509/dispatch/DispatchClientInputMessage.h header file).
/// @li @ref cc_x509::dispatch::ClientInputMsgDispatcherDefaultOptions
/// (defined in @b cc_x509/dispatch/DispatchClientInputMessage.h header file).
///
/// @section main_customization Customization
/// Depending on the value of @b customization option passed to the @b commsdsl2comms
/// code generator, the latter generates @ref cc_x509::options::DefaultOptions
/// struct (defined in @b cc_x509/options/DefaultOptions.h file),
/// which is used by default throughout the protocol definition classes.
/// The struct contains all the available type definition, which can be used to
/// customize default data structures and/or behaviour of various classes.
/// If any additional customization is required, just recreate similar struct with
/// relevant types overriden with new definition. The easiest way is to extend
/// the cc_x509::options::DefaultOptions. For example:
/// @code
/// struct MyOptions : public cc_x509::options::DefaultOptions
/// {
///     struct field : public cc_x509::options::DefaultOptions::field
///     {
///         // use comms::util::StaticString as storage type
///         using SomeStringField = comms::option::app::FixedSizeStorage<32>;
///     };
/// };
/// @endcode
/// @b NOTE, that inner scope of structs in the cc_x509::options::DefaultOptions
/// resembles scope of namespaces used in protocol definition.
///
/// The @b COMMS library also provides a flexible way to configure polymorphic
/// interface for the message classes. If the defined protocol has multiple
/// uni-directional messages (marked using @b sender property in the schema),
/// then it is recommended to define two separate interfaces: one for input,
/// other for output:
/// @code
/// using MyInputMsg =
///    cc_x509::Message<
///        comms::option::app::ReadIterator<const std::uint8_t*>, // for polymorphic read
///        comms::option::app::Handler<MyHandler> // for polymorphic dispatch
///    >;
///
/// using MyOutputMsg =
///    cc_x509::Message<
///        comms::option::app::WriteIterator<std::uint8_t*>, // for polymorphic write
///        comms::option::app::LengthInfoInterface, // for polymorphic serialization length retrieval
///        comms::option::app::IdInfoInterface // for polymorphic message ID retrieval
///    >;
/// @endcode
/// In case there are only few uni-directional messages, it may make sence to define
/// single interface class:
/// @code
/// using MyMsg =
///    cc_x509::Message<
///        comms::option::app::ReadIterator<const std::uint8_t*>, // for polymorphic read
///        comms::option::app::Handler<MyHandler> // for polymorphic dispatch
///        comms::option::app::WriteIterator<std::uint8_t*>, // for polymorphic write
///        comms::option::app::LengthInfoInterface, // for polymorphic serialization length retrieval
///        comms::option::app::IdInfoInterface // for polymorphic message ID retrieval
///    >;
/// @endcode
/// In this case the code generator may also define @b cc_x509::options::ServerDefaultOptions
/// (defined in @b cc_x509/options/ServerDefaultOptions.h file) and
/// @b cc_x509::options::ClientDefaultOptions (defined in @b cc_x509/options/ClientDefaultOptions.h file).
/// These structs suppress generation of unnecessary virtual functions which are not
/// going to be used. Consider using this structs as options instead of default
/// cc_x509::options::DefaultOptions.
///
/// Also there is @ref cc_x509::options::BareMetalDefaultOptions
/// (defined in @b cc_x509/options/BareMetalDefaultOptions.h file) which can help in defining
/// options for bare-metal applications. It exclude all usage of dynamic memory allocation.
///
/// In case non-custom &lt;id&gt; layer has been used in schema (files), custom,
/// application-specific allocation options to it may include
/// @b comms::option::app::InPlaceAllocation and/or @b comms::option::app::SupportGenericMessage.
/// Please see the documentation of the @b COMMS library itself for more details.
///
/// In many cases the input buffer is sequential (not circular), where the end of message payload
/// never precedes its beginning and the processing is implemented in a way where message objects
/// never outlive the input buffer. In such scenarios it could be a waste of memory / CPU cycles to
/// copy bytes from the input buffer to internal storage of the fields like &lt;string&gt;
/// (@b comms::field::String) and/or &lt;data&gt; (@b comms::field::ArrayList of raw bytes).
/// The generated code also provides cc_x509::options::DataViewDefaultOptions (defined in
/// @b cc_x509/options/DataViewDefaultOptions.h file) where relevant fields apply @b comms::option::app::OrigDataView
/// option.
///
/// Also note that the specified extension options are implemented as the following template classes
/// which receive other options as their base class and apply relevant changes on top.
/// @li @ref cc_x509::options::ClientDefaultOptionsT
/// @li @ref cc_x509::options::ServerDefaultOptionsT
/// @li @ref cc_x509::options::BareMetalDefaultOptionsT
/// @li @ref cc_x509::options::DataViewDefaultOptionsT
///
/// As the result it is possible to combine them. For example:
/// @code
/// using MyOptions=
///     cc_x509::options::DataViewDefaultOptionsT<
///         cc_x509::options::ClientDefaultOptions
///     >;
/// @endcode

